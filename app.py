import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WEIGHT, HEIGHT, AGE, ACTIVITY, CITY, CALORIE_GOAL = range(6)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º
WATER_BASE_ML_PER_KG = 30
WATER_ACTIVITY_ML_PER_30MIN = 500
WATER_BASE_ML = 500
WATER_ABOVE_WEATHER_LIMIT = 1000 
CALORIES_ACTIVITY_FACTOR = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∏—Ö MET (Metabolic Equivalent of Task)
WORKOUT_MET = {
    '–±–µ–≥': 8,
    '—Ö–æ–¥—å–±–∞': 3,
    '–ø–ª–∞–≤–∞–Ω–∏–µ': 6,
    '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 7,
    '—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª': 5,
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /set_profile —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."
    )

def set_profile(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    return WEIGHT

def weight_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id] = {'weight': float(update.message.text)}
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    return HEIGHT

def height_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]['height'] = float(update.message.text)
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

def age_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]['age'] = int(update.message.text)
    update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å?")
    return ACTIVITY

def activity_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]['activity'] = int(update.message.text)
    update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    return CITY

def get_weather(city: str) -> float:
    api_key = os.getenv('OPENWEATHERMAP_API_KEY')
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()['main']['temp']
    else:
        return 20  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def city_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    city = update.message.text
    users[user_id]['city'] = city
    temp = get_weather(city)
    
    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –≤–æ–¥—ã
    weight = users[user_id]['weight']
    water_goal = weight * WATER_BASE_ML_PER_KG
    water_goal += (users[user_id]['activity'] / 30) * WATER_ACTIVITY_ML_PER_30MIN
    water_goal += WATER_BASE_ML
    if temp > 25:
        water_goal -= WATER_ABOVE_WEATHER_LIMIT
    
    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
    calorie_goal = 10 * weight + 6.25 * users[user_id]['height'] - 5 * users[user_id]['age'] + 5
    calorie_goal *= CALORIES_ACTIVITY_FACTOR
    
    users[user_id]['water_goal'] = round(water_goal)
    users[user_id]['calorie_goal'] = round(calorie_goal)
    users[user_id].update({
        'logged_water': 0,
        'logged_calories': 0,
        'burned_calories': 0,
    })
    
    update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {round(water_goal)} –º–ª/–¥–µ–Ω—å\n"
        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {round(calorie_goal)} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        "–ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (/skip):"
    )
    return CALORIE_GOAL

def skip_calorie_goal(update: Update, context: CallbackContext) -> int:
    return ConversationHandler.END

def calorie_goal_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    users[user_id]['calorie_goal'] = int(update.message.text)
    update.message.reply_text("–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

def log_water(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å /set_profile")
        return
    
    try:
        amount = float(context.args[0])
        users[user_id]['logged_water'] += amount
        remaining = users[user_id]['water_goal'] - users[user_id]['logged_water']
        update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(remaining, 0)} –º–ª")
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–ª>")

def get_food_calories(query: str) -> float:
    url = f"https://world.openfoodfacts.org/cgi/search.pl?search_terms={query}&search_simple=1&json=1"
    response = requests.get(url).json()
    if response['products']:
        return response['products'][0].get('nutriments', {}).get('energy-kcal_100g', 0)
    return 0

def log_food(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å /set_profile")
        return
    
    try:
        product = ' '.join(context.args)
        kcal_per_100g = get_food_calories(product)
        if kcal_per_100g <= 0:
            update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        context.user_data['current_product'] = {'name': product, 'kcal': kcal_per_100g}
        update.message.reply_text(f"{product} ‚Äî {kcal_per_100g} –∫–∫–∞–ª/100–≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    except:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞>")

def handle_grams(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    try:
        grams = float(update.message.text)
        product = context.user_data['current_product']
        calories = (product['kcal'] * grams) / 100
        users[user_id]['logged_calories'] += calories
        update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {round(calories, 1)} –∫–∫–∞–ª")
        del context.user_data['current_product']
    except:
        update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def log_workout(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å /set_profile")
        return
    
    try:
        workout_type = context.args[0].lower()
        duration = int(context.args[1])
        met = WORKOUT_MET.get(workout_type, 3)
        calories_burned = (met * users[user_id]['weight'] * duration) / 60
        water_ml = (duration // 30) * 200
        
        users[user_id]['burned_calories'] += calories_burned
        users[user_id]['water_goal'] += water_ml
        
        update.message.reply_text(
            f"üèãÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω ‚Äî {round(calories_burned)} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ {water_ml} –º–ª –≤–æ–¥—ã."
        )
    except:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <—Ç–∏–ø_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–º–∏–Ω—É—Ç—ã>")

def check_progress(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å /set_profile")
        return
    
    user = users[user_id]
    water_remaining = user['water_goal'] - user['logged_water']
    calories_remaining = user['calorie_goal'] - user['logged_calories'] + user['burned_calories']
    
    message = (
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {max(water_remaining, 0)} –º–ª\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {round(user['logged_calories'])} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {round(user['burned_calories'])} –∫–∫–∞–ª\n"
        f"- –ë–∞–ª–∞–Ω—Å: {round(calories_remaining)} –∫–∫–∞–ª"
    )
    update.message.reply_text(message)

def main() -> None:
    updater = Updater(os.getenv('TELEGRAM_BOT_TOKEN'))
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('set_profile', set_profile)],
        states={
            WEIGHT: [MessageHandler(Filters.text & ~Filters.command, weight_handler)],
            HEIGHT: [MessageHandler(Filters.text & ~Filters.command, height_handler)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, age_handler)],
            ACTIVITY: [MessageHandler(Filters.text & ~Filters.command, activity_handler)],
            CITY: [MessageHandler(Filters.text & ~Filters.command, city_handler)],
            CALORIE_GOAL: [
                MessageHandler(Filters.text & ~Filters.command, calorie_goal_handler),
                CommandHandler('skip', skip_calorie_goal),
            ],
        },
        fallbacks=[],
    )

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler('log_water', log_water))
    dispatcher.add_handler(CommandHandler('log_food', log_food))
    dispatcher.add_handler(CommandHandler('log_workout', log_workout))
    dispatcher.add_handler(CommandHandler('check_progress', check_progress))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_grams))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()